/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
/*
 * Copyright 2018 itlgl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
apply plugin: 'maven'
apply plugin: 'signing'

ext.releaseRepositoryUrl = ""//getMavenReleaseRepositoryUrl()
ext.snapshotRepositoryUrl = ""//getMavenSnapshotRepositoryUrl()
ext.repositoryUsername = getMavenRepositoryUsername()
ext.repositoryPassword = getMavenRepositoryPassword()

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getMavenReleaseRepositoryUrl() {
    return hasProperty('MAVEN_RELEASE_REPOSITORY_URL') ? MAVEN_RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getMavenSnapshotRepositoryUrl() {
    return hasProperty('MAVEN_SNAPSHOT_REPOSITORY_URL') ? MAVEN_SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getJcenterReleaseRepositoryUrl() {
    return hasProperty('JCENTER_RELEASE_REPOSITORY_URL') ? JCENTER_RELEASE_REPOSITORY_URL
            : ""
}

def getJcenterSnapshotRepositoryUrl() {
    return hasProperty('JCENTER_SNAPSHOT_REPOSITORY_URL') ? JCENTER_SNAPSHOT_REPOSITORY_URL
            : ""
}

def getLocalRepositoryUrl() {
    return hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
            : ""
}

def getMavenRepositoryUsername() {
    return hasProperty('MAVEN_USERNAME') ? MAVEN_USERNAME : ""
}

def getMavenRepositoryPassword() {
    return hasProperty('MAVEN_PASSWORD') ? MAVEN_PASSWORD : ""
}

def getJcenterRepositoryUsername() {
    return hasProperty('JCENTER_USERNAME') ? JCENTER_USERNAME : ""
}

def getJcenterRepositoryPassword() {
    return hasProperty('JCENTER_PASSWORD') ? JCENTER_PASSWORD : ""
}

def getJavaDocFileEncoding() {
    return hasProperty('JAVADOC_FILE_ENCODING') ? JAVADOC_FILE_ENCODING : "UTF-8"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: releaseRepositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
                snapshotRepository(url: snapshotRepositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }
    }
    
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        // https://www.2cto.com/kf/201701/582969.html
        options.encoding = getJavaDocFileEncoding()
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
    
    task uploadToMaven {
        doFirst {
            releaseRepositoryUrl = getMavenReleaseRepositoryUrl()
            snapshotRepositoryUrl = getMavenSnapshotRepositoryUrl()
            repositoryUsername = getMavenRepositoryUsername()
            repositoryPassword = getMavenRepositoryPassword()
            
            println "upload to maven"
        }
    }

    task uploadToJcenter {
        doFirst {
            releaseRepositoryUrl = getJcenterReleaseRepositoryUrl()
            snapshotRepositoryUrl = getJcenterSnapshotRepositoryUrl()
            repositoryUsername = getJcenterRepositoryUsername()
            repositoryPassword = getJcenterRepositoryPassword()

            println "upload to jcenter"
        }
    }
    
    task uploadToLocal {
        doFirst {
            releaseRepositoryUrl = getLocalRepositoryUrl()
            snapshotRepositoryUrl = getLocalRepositoryUrl()
            repositoryUsername = ""
            repositoryPassword = ""

            println "upload to local"
        }
    }
    
    task setUploadArchivesParam {
        doFirst {
            println "releaseRepositoryUrl=$releaseRepositoryUrl"
            println "snapshotRepositoryUrl=$snapshotRepositoryUrl"
            println "repositoryUsername=$repositoryUsername"
            println "repositoryPassword=$repositoryPassword"
        
            uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(url: releaseRepositoryUrl) {
                            authentication(userName: repositoryUsername, password: repositoryPassword)
                        }
                        snapshotRepository(url: snapshotRepositoryUrl) {
                            authentication(userName: repositoryUsername, password: repositoryPassword)
                        }
                    }
                }
            }
        }
    }
    
    uploadToMaven.finalizedBy setUploadArchivesParam
    uploadToJcenter.finalizedBy setUploadArchivesParam
    uploadToLocal.finalizedBy setUploadArchivesParam
    setUploadArchivesParam.finalizedBy uploadArchives
}
